%!PS-Adobe-3.0
%%Title: ReflWidthBothEdge.py
%%For: Kunio Hirata
%%Creator: a2ps version 4.14
%%CreationDate: Mon Feb 18 16:11:34 2013
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 4
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(import) K
( os,sys,math) p n
(from) K
( numpy ) p
(import) K
( *) p n
(from) K
( Amat ) p
(import) K
( *) p n
() N
(class) K
( ReflWidthBothEdge:) p n
() N
() S 8 T () S
(def) K
( __init__\(self,amatfile,divv,divh,mosaic,dispersion,oscstep\):) p n
() S 8 T () S 16 T (self.amatfile=amatfile) N
() S 8 T () S 16 T (self.mosaic=mosaic) N
() S 8 T () S 16 T (self.dispersion=dispersion ) S 48 T () S
(#UNIT: degree) c n
() p 8 T () S 16 T (self.divv=divv) S 32 T () S 40 T () S 48 T () S
(# UNIT: degree) c n
() p 8 T () S 16 T (self.divh=divh) S 32 T () S 40 T () S 48 T () S
(# UNIT: degree) c n
() p 8 T () S 16 T (self.cuspflag=0) N
() S 8 T () S 16 T (self.width_max=3.0 ) S 40 T () S 48 T () S
(# UNIT: degree) c n
() p 8 T () S 16 T (self.oscstep=0.1 ) S 40 T () S 48 T () S
(# UNIT: degree) c n
() p 8 T () S 16 T (self.isPrepDELEPS=False) S 40 T () N
() N
() S 8 T () S 16 T () S
(# Some flags) c n
() p 8 T () S 16 T (self.isInit=False) N
() S 8 T () S 16 T (self.isSolved=False) N
() N
() S 8 T () S
(def) K
( init\(self\):) p n
() S 8 T () S 16 T () S
(#) c 24 T (S0 vector \(anti-parallel to the x-ray\)) N
() p 8 T () S 16 T (self.s0=array\(\(-1,0,0\)\)) N
() S 8 T () S 16 T () S
(#) c 24 T (E3 vector \(Z axis: rotation axis\)) N
() p 8 T () S 16 T (self.e3=array\(\(0,0,1\)\)) N
() N
() S 8 T () S 16 T () S
(# A matrix file open and read 'A matrix') c n
() p 8 T () S 16 T (amatftmp=Amat\(self.amatfile\)) N
() S 8 T () S 16 T (self.amat=amatftmp.getAmat\(\)) N
() S 8 T () S 16 T (self.isInit=True) N
() N
() S 8 T () S
(# hkl: array of reflection index \(type: integer\)) c n
() p 8 T () S
(# phistart: phi start angle [degrees]) c n
() p n
() S 8 T () S
(def) K
( setHKL\(self,hkl,phistart\):) p n
() S 8 T () S 16 T () S
(if) K
( self.isInit==False:) p n
() S 8 T () S 16 T () S 24 T (self.init\(\)) N
() S 8 T () S 16 T (self.isPrepDELEPS=False) N
() N
() S 8 T () S 16 T () S
(## HKL -> XYZ in reciprocal space) c n
() p 8 T () S 16 T () S
(# convert int -> float ) c n
() p 8 T () S 16 T (tmp_hkl=[]) N
() S 8 T () S 16 T (tmp_hkl.append\(float\(hkl[0]\)\)) N
() S 8 T () S 16 T (tmp_hkl.append\(float\(hkl[1]\)\)) N
() S 8 T () S 16 T (tmp_hkl.append\(float\(hkl[2]\)\)) N
() S 8 T () S 16 T (self.hkl=hkl) N
() N
() S 8 T () S 16 T (self.phistart=phistart) N
() N
() S 8 T () S 16 T () S
(# Rotation matrix with phistart from Amatrix origin) c n
() p 8 T () S 16 T (phistart_matr=self.makeRotMat\(self.phistart\)) N
() N
() S 8 T () S 16 T () S
(# Rotation matrix with phiend from Amatrix origin) c n
() p 8 T () S 16 T () S
(# phiend = self.phistart + oscillation_width) c n
() p 8 T () S 16 T (phiend=self.phistart+self.oscstep) N
() S 8 T () S 16 T (phiend_matr=self.makeRotMat\(phiend\)) N
() N
() S 8 T () S 16 T () S
(# Amat x Rotation matrix \(@start phi\)) c n
() p 8 T () S 16 T (self.amat_startphi=dot\(self.amat,phistart_matr\)) N
() N
() S 8 T () S 16 T () S
(# Amat x Rotation matrix \(@end phi\)) c n
() p 8 T () S 16 T (self.amat_endphi=dot\(self.amat,phiend_matr\)) N
() N
() S 8 T () S 16 T () S
(# Amat*HKL -> XYZ in reciprocal space) c n
() p 8 T () S 16 T (float_hkl=array\(tmp_hkl\)) N
() N
() S 8 T () S 16 T () S
(# XYZ1: RLP at start phi) c n
() p 8 T () S 16 T (self.xyz1=dot\(self.amat_startphi,float_hkl\)) N
(ReflWidthBothEdge.py) (Page 1/7) ( 2 18, 13 16:10) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S
(# XYZ2: RLP at end phi) c n
() p 8 T () S 16 T (self.xyz2=dot\(self.amat_endphi,float_hkl\)) N
() N
() S 8 T () S 16 T () S
(# E1/E2/E3 vectors are calculated from XYZ1\(RLP@ start phi\)) c n
() p 8 T () S 16 T () S
(##) c 24 T (E2 vector \(E3xRLP/|E3xRLP|\)) N
() p 8 T () S 16 T (self.e2=cross\(self.e3,self.xyz1\)/linalg.norm\(cross\(self.e3,self.) N
(xyz1\)\)) N
() S 8 T () S 16 T () S
(#) c 24 T (E1 vector \(E2 x E3\)) N
() p 8 T () S 16 T (self.e1=cross\(self.e2,self.e3\)) N
() N
() S 8 T () S 16 T () S
(## d* value is calculated from XYZ1\(RLP@start phi\)) c n
() p 8 T () S 16 T () S
(## Calculating d* value) c n
() p 8 T () S 16 T (self.dstar=linalg.norm\(self.xyz1\)) N
() S 8 T () S 16 T (self.dstar2=self.dstar*self.dstar) N
() S 8 T () S 16 T (self.dst4=self.dstar2*self.dstar2*0.25) N
() N
() S 8 T () S 16 T () S
(## XRLP .vs. Ewald sphere) c n
() p 8 T () S 16 T () S
(## Diffraction condition) c n
() p 8 T () S 16 T () S
(# CEA.cos\(phic\)+CEB.sin\(phic\)=CEC) c n
() p 8 T () S 16 T () S
(# 1\) CEA=\(XRLP.E1\)*\(E1.S0\)) c n
() p 8 T () S 16 T () S
(# 2\) CEB=\(XRLP.E1\)*\(E2.S0\)) c n
() p 8 T () S 16 T () S
(# 3\) CEC=0.5*\(XRLP.E1\)^2+0.5*\(XRLP.E3\)^2-\(XRLP.E3\)*\(E3.S0\)) c n
() p 8 T () S 16 T () S
(# 4\) CEABSQ=CEA^2+CEB^2 \(=0.0 -> XRLP on rotation axis\)) c n
() p n
() S 8 T () S 16 T () S
(## DEBUG) c n
() p 8 T () S 16 T () S
(#print "E1=",self.e1) c n
() p 8 T () S 16 T () S
(#print "E2=",self.e2) c n
() p 8 T () S 16 T () S
(#print "E3=",self.e3) c n
() p 8 T () S 16 T () N
() S 8 T () S 16 T () S
(# Preparation) c n
() p 8 T () S 16 T () S
(# xe1: XRLP.E1) c n
() p 8 T () S 16 T (xe1=dot\(self.xyz1,self.e1\)) N
() S 8 T () S 16 T () S
(# xe3: XRLP.E3) c n
() p 8 T () S 16 T (xe3=dot\(self.xyz1,self.e3\)) N
() S 8 T () S 16 T () S
(# XE1D) c n
() p 8 T () S 16 T (e1_dot_s0=dot\(self.e1,self.s0\)) N
() S 8 T () S 16 T (e2_dot_s0=dot\(self.e2,self.s0\)) N
() S 8 T () S 16 T (e3_dot_s0=dot\(self.e3,self.s0\)) N
() N
() S 8 T () S 16 T () S
(## DEBUG) c n
() p 8 T () S 16 T () S
(#print "XE1/3=",xe1,xe3) c n
() p 8 T () S 16 T () S
(#print "E1.S0/E2.S0/E3.S0=",e1_dot_s0,e2_dot_s0,e3_dot_s0) c n
() p n
() S 8 T () S 16 T () S
(####) c n
() p 8 T () S 16 T () S
(# CEA,CEB,CEC) c n
() p 8 T () S 16 T (self.cea=xe1*e1_dot_s0) N
() S 8 T () S 16 T (self.ceb=xe1*e2_dot_s0) N
() S 8 T () S 16 T (self.cec=0.5*pow\(xe1,2.0\)+0.5*pow\(xe3,2.0\)-\(xe3*e3_dot_s0\)) N
() S 8 T () S 16 T () S
(#print "CEA=",self.cea) c n
() p 8 T () S 16 T () S
(#print "CEB=",ceb) c n
() p 8 T () S 16 T () S
(#print "CEC=",cec) c n
() p n
() S 8 T () S 16 T (self.ceabsq=pow\(self.cea,2.0\)+pow\(self.ceb,2.0\)) N
() S 8 T () S 16 T () S
(#print "CEABS %12.5f"%self.ceabsq) c n
() p n
() S 8 T () S 16 T () S
(###############) c n
() p 8 T () S 16 T () S
(# There are 2 solutions where RLP crosses Ewald Sphere) c n
() p 8 T () S 16 T () S
(###############) c n
() p 8 T () S 16 T () S
(if) K
( self.ceabsq!=0.0:) p n
() S 8 T () S 16 T () S 24 T (self.arg1=self.cec/sqrt\(self.ceabsq\)) N
() S 8 T () S 16 T () S 24 T () S
(#print "ARG=",self.arg1) c n
() p 8 T () S 16 T () S 24 T () S
(return) K
( True) p n
() S 8 T () S 16 T () S
(else) K
(:) p n
() S 8 T () S 16 T () S 24 T () S
(return) K
( False) p n
() N
() S 8 T () S
(def) K
( solvePhi\(self\):) p n
() S 8 T () S 16 T (dtor=4.0*arctan\(1.0\)/180.0) N
() N
() S 8 T () S 16 T () S
(################) c n
(ReflWidthBothEdge.py) (Page 2/7) ( 2 18, 13 16:10) title
border
grestore
(Printed by Kunio Hirata) rhead
(ReflWidthBothEdge.py) (1/4) (\346M-^\\M-^H\346M-^[M-^\\\346M-^W\245 2\346M-^\\M-^H 18, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S
(# self.arg1 value is not in the reasonable range) c n
() p 8 T () S 16 T () S
(################) c n
() p 8 T () S 16 T () S
(if) K
( self.arg1>1.0:) p n
() S 8 T () S 16 T () S 24 T (self.arg1=1.0) N
() S 8 T () S 16 T () S
(elif) K
( self.arg1<-1.0:) p n
() S 8 T () S 16 T () S 24 T (self.arg1=-1.0) N
() N
() S 8 T () S 16 T () S
(# solutions in unit of radians) c n
() p 8 T () S 16 T (t1=arccos\(self.arg1\)) N
() S 8 T () S 16 T (t2=arctan2\(self.ceb,self.cea\)) N
() S 8 T () S 16 T () N
() S 8 T () S 16 T () S
(# 1st solution in unit of degree) c n
() p 8 T () S 16 T (phic=degrees\(t1+t2\)) N
() S 8 T () S 16 T (phia=self.phistart+phic) N
() S 8 T () S 16 T () S
(# 2nd solutin in unit of degree) c n
() p 8 T () S 16 T (self.phic=degrees\(-t1+t2\)) N
() S 8 T () S 16 T (phib=self.phistart+self.phic;) N
() N
() S 8 T () S 16 T () S
(# Choosing the solution) c n
() p 8 T () S 16 T (diff1=fabs\(phia-self.phistart\)) N
() S 8 T () S 16 T (diff2=fabs\(phib-self.phistart\)) N
() N
() S 8 T () S 16 T () S
(# DEBUG) c n
() p 8 T () S 16 T () S
(#-print "T1/T2=",t1,t2) c n
() p 8 T () S 16 T () S
(#print "PHIA/PHIB=",phia,phib) c n
() p 8 T () S 16 T () S
(#-print "DIFF1/DIFF2=",diff1,diff2) c n
() p n
() S 8 T () S 16 T () S
(# self.phi UNIT:degrees) c n
() p 8 T () S 16 T () S
(if) K
( diff1<diff2:) p n
() S 8 T () S 16 T () S 24 T (self.phi=phia) N
() S 8 T () S 16 T () S
(else) K
(:) p n
() S 8 T () S 16 T () S 24 T (self.phi=phib) N
() N
() S 8 T () S 16 T () S
(#print "solved PHI",self.phi) c n
() p 8 T () S 16 T (self.isSolved=True) N
() N
() S 8 T () S
(def) K
( makeRotMat\(self,phideg\):) p n
() S 8 T () S 16 T (phirad=radians\(phideg\)) N
() S 8 T () S 16 T () S
(#print "PHIRAD/COS\(PHIRAD\)/SIN\(PHIRAD\)=",phirad,cos\(phirad\),sin\() c n
(phirad\)) N
() p 8 T () S 16 T (tpl=matrix\( \() N
() S 8 T () S 16 T (        \( cos\(phirad\), -sin\(phirad\),0.\),) N
() S 8 T () S 16 T (        \( sin\(phirad\), cos\(phirad\),0\),) N
() S 8 T () S 16 T (        \( 0., 0., 1.\)) N
() S 8 T () S 16 T (\) \)) N
() S 8 T () S 16 T (mat=array\(matrix\(\(tpl\)\).reshape\(3,3\)\)) N
() S 8 T () S 16 T () S
(return) K
( mat) p n
() N
() S 8 T () S
(def) K
( distEStoRLP\(self\) :) p n
() S 8 T () S 16 T () S
(if) K
( self.isSolved==False :) p n
() S 8 T () S 16 T () S 24 T (self.solvePhi\(\)) N
() S 8 T () S 16 T () S
(# Ewald sphere \(x+1\)^2 + y^2 + z^2 = 1.0) c n
(       ) p 8 T () S
(##  XRLP at start phi) c n
() p 8 T () S 16 T () S
(#-print "XYZ:",self.xyz) c n
() p 8 T () S 16 T (x1=self.xyz[0]) N
() S 8 T () S 16 T (y1=self.xyz[1]) N
() S 8 T () S 16 T (z1=self.xyz[2]) N
() S 8 T () S 16 T (x1_2=\(x1+1.0\)*\(x1+1.0\)) N
() S 8 T () S 16 T (y1_2=y1*y1) N
() S 8 T () S 16 T (z1_2=z1*z1) N
() S 8 T () S 16 T (x2_2=\(x2+1.0\)*\(x2+1.0\)) N
() S 8 T () S 16 T (y2_2=y2*y2) N
() S 8 T () S 16 T () S
(# Distance from XYZ to Ewald sphere) c n
() p 8 T () S 16 T (self.) S
(del) K
(1=sqrt\(x1_2+y1_2+z1_2\)-1.0) p n
() S 8 T () S 16 T (self.) S
(del) K
(1=sqrt\(x1_2+y1_2+z1_2\)-1.0) p n
() S 8 T () S 16 T (self.adel1=fabs\(self.) S
(del) K
(1\)) p n
() S 8 T () S 16 T () S
(#-print "DEL1:",self.del1) c n
() p 8 T () S 16 T () S
(#-print "ADEL1",self.adel1) c n
() p n
(ReflWidthBothEdge.py) (Page 3/7) ( 2 18, 13 16:10) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(def) K
( distEwaldToRLP\(self\) :) p n
() S 8 T () S 16 T () S
(if) K
( self.isSolved==False :) p n
() S 8 T () S 16 T () S 24 T (self.solvePhi\(\)) N
() S 8 T () S 16 T () S
(# Ewald sphere \(x+1\)^2 + y^2 + z^2 = 1.0) c n
(       ) p 8 T () S
(######################) c n
(       ) p 8 T () S
(##  XRLP at start phi) c n
(       ) p 8 T () S
(######################) c n
() p 8 T () S 16 T (x1=self.xyz1[0]) N
() S 8 T () S 16 T (y1=self.xyz1[1]) N
() S 8 T () S 16 T (z1=self.xyz1[2]) N
() S 8 T () S 16 T (x2=self.xyz2[0]) N
() S 8 T () S 16 T (y2=self.xyz2[1]) N
() S 8 T () S 16 T (z2=self.xyz2[2]) N
() N
() S 8 T () S 16 T () S
(# Some short cut variants) c n
() p 8 T () S 16 T () S
(# for XYZ1@start phi) c n
() p 8 T () S 16 T (x1_2=\(x1+1.0\)*\(x1+1.0\)) N
() S 8 T () S 16 T (y1_2=y1*y1) N
() S 8 T () S 16 T (z1_2=z1*z1) N
() S 8 T () S 16 T () S
(# for XYZ1@start phi) c n
() p 8 T () S 16 T (x2_2=\(x2+1.0\)*\(x2+1.0\)) N
() S 8 T () S 16 T (y2_2=y2*y2) N
() S 8 T () S 16 T () S
(#####################) c n
() p 8 T () S 16 T () S
(# Distance from XYZ to Ewald sphere) c n
() p 8 T () S 16 T () S
(#####################) c n
() p 8 T () S 16 T (self.) S
(del) K
(1=sqrt\(x1_2+y1_2+z1_2\)-1.0) p n
() S 8 T () S 16 T (self.) S
(del) K
(2=sqrt\(x2_2+y2_2+z1_2\)-1.0) p n
() S 8 T () S 16 T (self.adel1=fabs\(self.) S
(del) K
(1\)) p n
() S 8 T () S 16 T (self.adel2=fabs\(self.) S
(del) K
(2\)) p n
() N
() S 8 T () S 16 T () S
(return) K
( True) p n
() N
() S 8 T () S
(def) K
( calcLorentz\(self\):) p n
() S 8 T () S 16 T () S
(# Matrix required for Lorentz factor estimation) c n
() p 8 T () S 16 T (tmp1=cross\(self.e3,self.s0\)) N
() S 8 T () S 16 T () S
(# RLP coordinates at the 'solved phi' angle) c n
() p 8 T () S 16 T () S
(# self.phic [degrees]) c n
() p 8 T () S 16 T (phicrotmat=self.makeRotMat\(self.phic\)) N
() S 8 T () S 16 T (xrlpe=dot\(phicrotmat,self.xyz1\)) N
() S 8 T () S 16 T () N
() S 8 T () S 16 T () S
(# Lorentz factor is estimated at the beginning rotation angle) c n
() p 8 T () S 16 T () S
(#print tmp1,xrlpe) c n
() p 8 T () S 16 T (t3=dot\(tmp1,xrlpe\)) N
() S 8 T () S 16 T (self.lorentz_factor=fabs\(1.0/t3\);) N
() N
() S 8 T () S
(def) K
( calcRspot\(self\):) p n
() N
() S 8 T () S 16 T () S
(# Divergence ) c n
() p 8 T () S 16 T () S
(#---- Conventional source geometry) c n
() p 8 T () S 16 T () S
(#  Radius of reciprocal lattice point along radius of Ewald sphe) c n
(re) N
() p 8 T () S 16 T () S
(#     RSPOT = 0.5*\(DIVERGENCE+dispersion*tan\(theta\) \)*DSTAR*COS\() c n
(THETA\)) N
() p 8 T () S 16 T () S
(#     and as DSTAR*COS\(THETA\) = SQRT\(DSTAR**2-0.25*DSTAR**4\)) c n
() p 8 T () S 16 T () S
(#  Note that the divergence parameters DIVH,DIVV and the mosaic ) c n
(spread) N
() p 8 T () S 16 T () S
(#  are stored in the generate file as the FULL WIDTHS in degrees) c n
(.) N
() p 8 T () S 16 T () S
(#  These are converted to HALF WIDTHS in radians prior to the pr) c n
(ediction) N
() p 8 T () S 16 T () S
(#  calculations.) c n
() p 8 T () S 16 T () S
(#  Add the contribution due to finite block size.) c n
() p n
() S 8 T () S 16 T () S
(#print "DEG: divv,divh=",self.divv,self.divh) c n
() p 8 T () S 16 T () S
(#print "DEG: mosaic=",self.mosaic) c n
() p 8 T () S 16 T () S
(#print "RAD: divv,divh=",radians\(self.divv\),radians\(self.divh\)) c n
() p 8 T () S 16 T () S
(#print "RAD: mosaic=",radians\(self.mosaic\)) c n
() p n
() S 8 T () S 16 T () S
(# Mosaic/Divergence convertion which can match to MOSFLM) c n
(ReflWidthBothEdge.py) (Page 4/7) ( 2 18, 13 16:10) title
border
grestore
(Printed by Kunio Hirata) rhead
(ReflWidthBothEdge.py) (2/4) (\346M-^\\M-^H\346M-^[M-^\\\346M-^W\245 2\346M-^\\M-^H 18, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S
(# For strategy option ON ????) c n
() p 8 T () S 16 T (divv=radians\(self.divv\)/2.0) N
() S 8 T () S 16 T (divh=radians\(self.divh\)/2.0) N
() S 8 T () S 16 T (mosaic=radians\(self.mosaic\)/2.0) N
() N
() S 8 T () S 16 T () S
(# Energy dispersion?) c n
() p 8 T () S 16 T (delcor=0.0001) N
() S 8 T () S 16 T () S
(# z1 of XRLP) c n
() p 8 T () S 16 T (z1=self.xyz1[2]) N
() S 8 T () S 16 T () S
(# ymid : in the MOSFLM \(Y@phistart+Y@phiend\)/2.0) c n
() p 8 T () S 16 T (y1=self.xyz1[1]) N
() S 8 T () S 16 T (y2=self.xyz2[1]) N
() S 8 T () S 16 T (ymid=0.5*\(y1+y2\)) N
() S 8 T () S 16 T (yms=ymid*ymid) N
() N
() S 8 T () S 16 T () S
(# Preparation of parameters required for divergence calculation) c n
() p 8 T () S 16 T (esyn_h=delcor*self.dstar2+z1*divh) N
() S 8 T () S 16 T (esyn_v=divv*ymid) N
() S 8 T () S 16 T () S
(# Divergence calculation) c n
() p 8 T () S 16 T (divergence=sqrt\(\(pow\(esyn_h,2.0\)+pow\(esyn_v,2.0\)\)/\(yms+z1*z1\)\)) N
() S 8 T () S 16 T () S
(# Reflection spot radius) c n
() p 8 T () S 16 T (self.rspot=\(divergence+mosaic\)*sqrt\(self.dstar2-self.dst4\) \\) N
() S 8 T () S 16 T () S 24 T (+0.25*self.dispersion*self.dstar2) N
() S 8 T () S 16 T () S
(#-print "DIVERG/ETA/DSTAR2/RSPOT=",divergence,mosaic,self.dstar2) c n
(,self.rspot) N
() p 8 T () S 16 T () S
(#print "RSPOT=",self.rspot) c n
() p 8 T () S 16 T () S
(return) K
( self.rspot) p n
() N
() S 8 T () S
(def) K
( cuspcheck\(self\):) p n
() S 8 T () S 16 T (csmin=0.5*self.dstar2+self.rspot) N
() S 8 T () S 16 T (csmin2=self.dst4+self.dstar2*self.rspot) N
() S 8 T () S 16 T (x,y=self.xyz1[0],self.xyz1[1]) N
() S 8 T () S 16 T (xys=x*x+y*y) N
() S 8 T () S 16 T () S
(#=====================) c n
() p 8 T () S 16 T () S
(# What should csimin test be ? The spot can still appear on imag) c n
(e) N
() p 8 T () S 16 T () S
(# even if the centre of the rlp never cuts the sphere \(ie lies i) c n
(n) N
() p 8 T () S 16 T () S
(# the cusp region\) providing any part of the rlp touches the sph) c n
(ere.) N
() p 8 T () S 16 T () S
(# In this case, the test on line below is the right one, but thi) c n
(s) N
() p 8 T () S 16 T () S
(# seems to overpredict in practice, so limit it to case where th) c n
(e) N
() p 8 T () S 16 T () S
(# centre of the rlp must intersect the sphere.) c n
() p 8 T () S 16 T () S
(#=====================) c n
() p 8 T () S 16 T () S
(if) K
( xys<=csmin2:) p n
() S 8 T () S 16 T () S 24 T () S
(##      A part of spot is in cusp region) c n
() p 8 T () S 16 T () S 24 T (self.cuspflag=-3) N
() S 8 T () S 16 T () S
(elif) K
(\(xys<self.dst4\):) p n
() S 8 T () S 16 T () S 24 T () S
(##      Whole spot is included in cusp region) c n
() p 8 T () S 16 T () S 24 T (self.cuspflag=-4) N
() S 8 T () S 16 T () S 24 T (self.inCusp=true) N
() N
(    ) S
(## Reflection width and start/end phi of diffraction) c n
() p 8 T () S
(def) K
( diffWidth\(self\) :) p n
(        ) S
(##      Full width of reflection condition \(UNIT:radians\)) c n
() p 8 T () S 16 T (dtor=4.0*arctan\(1.0\)/180.0) N
() N
() S 8 T () S 16 T () S
(# self.phiw = spot angular radius in unit:degrees) c n
() p 8 T () S 16 T (self.phiw=2.0*self.rspot*self.lorentz_factor/dtor) N
() S 8 T () S 16 T (self.phis=self.phi-0.5*self.phiw) N
() S 8 T () S 16 T (self.phie=self.phis+self.phiw) N
() N
() S 8 T () S
(def) K
( numframes\(self\) :) p n
(        ) S
(##      Estimating max frames of this reflections) c n
(                maxframes=\(int\)\(self.width_max/oscstep\)) p n
() S 8 T () S 16 T () S
(#- print maxframes) c n
() p n
(ReflWidthBothEdge.py) (Page 5/7) ( 2 18, 13 16:10) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        ) p
(##      Find start BATCH in which this reflection is observed) c n
() p 8 T () S 16 T () S
(for) K
( i ) p
(in) K
( range\(1,maxframes+1\):) p n
(                        ) S
(if) K
( phistart-\(i-1\)*oscstep<=self.phis:) p n
(                                self.istart=i) N
(                                ) S
(break) K n
() p n
(                ) S
(for) K
( i ) p
(in) K
( range\(1,maxframes+1\):) p n
(                        ) S
(if) K
( phiend+\(i-1\)*oscstep>=phie:) p n
(                                self.iend=i;) N
(                                ) S
(break) K
(;) p n
(                self.iwidth=self.istart-1+self.iend-1+1;) N
() S 8 T () S 16 T () S
(#- print self.iwidth,self.istart,self.iend) c n
(        ) p
(## Estimation of deleps1,deleps2. this is the objective of this CLASS) c n
() p n
() S 8 T () S
(def) K
( prepDELEPS\(self\):) p n
() S 8 T () S 16 T (self.solvePhi\(\)) N
() S 8 T () S 16 T () S
(#self.distEStoRLP\(\)) c n
() p 8 T () S 16 T (self.distEwaldToRLP\(\)) N
() S 8 T () S 16 T (self.calcLorentz\(\)) N
() S 8 T () S 16 T (self.calcRspot\(\)) N
() S 8 T () S 16 T (self.diffWidth\(\)) N
() S 8 T () S 16 T (self.cuspcheck\(\)) N
() S 8 T () S 16 T (self.isPrepDELEPS=True) N
() N
() S 8 T () S
(def) K
( calcDELEPS\(self\):) p n
() S 8 T () S 16 T () S
(###############) c n
() p 8 T () S 16 T () S
(# Preparation) c n
() p 8 T () S 16 T () S
(###############) c n
() p 8 T () S 16 T () S
(if) K
( self.isPrepDELEPS==False:) p n
() S 8 T () S 16 T () S 24 T (self.prepDELEPS\(\)) N
() N
() S 8 T () S 16 T () S
(###############) c n
(        ) p
(## Calculate distance of edge of spot from sphere at end of rotation) c n
() p 8 T () S 16 T () S
(###############) c n
() p 8 T () S 16 T (dist1=self.adel1-self.rspot;) N
() S 8 T () S 16 T (dist2=self.adel2-self.rspot;) N
() N
() S 8 T () S 16 T () S
(print) K
( self.adel1,self.adel2) p n
() N
() S 8 T () S 16 T () S
(print) K
( ") p
(DIST1/DIST2=%12.5f %12.5f) str
("%\(dist1,dist2\)) p n
() N
(        ) S
(## Test if spot is cut at beginning of rotation) c n
(        ) p
(## Set DELEPS to a negative value ) c n
(        ) p
(## NOTE: sign change depending on whether Y is +ve/-ve) c n
() p n
() S 8 T () S 16 T (x1,y1,z1=self.xyz1[0],self.xyz1[1],self.xyz1[2]) N
() S 8 T () S 16 T (x2,y2,z2=self.xyz2[0],self.xyz2[1],self.xyz2[2]) N
() N
() S 8 T () S 16 T (self.deleps1=0.0) N
() S 8 T () S 16 T (self.deleps2=0.0) N
() S 8 T () S 16 T () N
() S 8 T () S 16 T () S
(# ADEL1 -> Cross section between E.S and RLP \(UNIT:radians\)) c n
() p 8 T () S 16 T () S
(if) K
( dist1<0.0:) p n
() S 8 T () S 16 T () S 24 T () S
(if) K
( y1<0.0:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (sign=-1) N
() S 8 T () S 16 T () S 24 T () S
(else) K
( :) p n
() S 8 T () S 16 T () S 24 T () S 32 T (sign=1) N
() S 8 T () S 16 T () S 24 T () S
(#####) c n
() p 8 T () S 16 T () S 24 T () S
(# DELEPS1 calculation) c n
() p 8 T () S 16 T () S 24 T () S
(#####) c n
() p 8 T () S 16 T () S 24 T (self.deleps1=-\(sign*self.) S
(del) K
(1/self.rspot+1.0\)*0.5) p n
() S 8 T () S 16 T () S 24 T () S
(# Spot cut at beginning -check for cut at both ends) c n
() p 8 T () S 16 T () S 24 T () S
(if) K
( dist2<0.0:) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S
(if) K
( y2<0.0:) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (sign=-1.0) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(else) K
(:) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (sign=1.0) N
() S 8 T () S 16 T () S 24 T (self.deleps2=\(1.0-sign*self.) S
(del) K
(2/rspot\)*0.5) p n
() S 8 T () S 16 T () S
(elif) K
( dist2<0.0:) p n
(ReflWidthBothEdge.py) (Page 6/7) ( 2 18, 13 16:10) title
border
grestore
(Printed by Kunio Hirata) rhead
(ReflWidthBothEdge.py) (3/4) (\346M-^\\M-^H\346M-^[M-^\\\346M-^W\245 2\346M-^\\M-^H 18, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S 24 T () S
(if) K
( y2<0.0:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (sign=-1.0) N
() S 8 T () S 16 T () S 24 T () S
(else) K
(:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (sign=1.0) N
() S 8 T () S 16 T () S 24 T (self.deleps2=\(1.0-sign*self.) S
(del) K
(2/rspot\)*0.5) p n
() N
() S 8 T () S 16 T () S
(print) K
( self.hkl,") p
(DELEPS1=%12.9f DELEPS2=%12.9f) str
("%\(self.deleps1,self.d) p n
(eleps2\)) N
() S 8 T () S 16 T () S
(return) K
( self.deleps1,self.deleps2) p n
() N
() S 8 T () S
(def) K
( calcPartiality\(self\):) p n
() S 8 T () S 16 T (dist1=self.adel1-self.rspot) N
() S 8 T () S 16 T (dist2=self.adel2-self.rspot) N
() N
() S 8 T () S 16 T () S
(## Case1) c n
() p 8 T () S 16 T () S
(if) K
( dist1<0.0 :) p n
() S 8 T () S 16 T () S 24 T () S
(## Case2) c n
() p 8 T () S 16 T () S 24 T () S
(if) K
( dist2<0.0:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (tmp=0.5*\(1.0-cos\(self.deleps1*pi\)\)) N
() S 8 T () S 16 T () S 24 T () S 32 T (self.pcalc=tmp-\(1.0-0.5*\(1.0-cos\(self.deleps2*pi) N
(\)\)\)) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(return) K
( self.pcalc) p n
() S 8 T () S 16 T () S 24 T () S
(else) K
(:) p n
() S 8 T () S 16 T () S 24 T () S 32 T (self.pcalc=0.5*\(1.0-cos\(self.deleps1*pi\)\)) N
() S 8 T () S 16 T () S 24 T () S 32 T () S
(return) K
( self.pcalc) p n
() S 8 T () S 16 T () S
(elif) K
( dist2<0.0:) p n
() S 8 T () S 16 T () S 24 T (self.pcalc=0.5*\(1.0-cos\(self.deleps2*pi\)\)) N
() S 8 T () S 16 T () S 24 T () S
(return) K
( self.pcalc) p n
() S 8 T () S 16 T () S
(else) K
(:) p n
() S 8 T () S 16 T () S 24 T (self.pcalc=0.0) N
() S 8 T () S 16 T () S 24 T () S
(return) K
( 0.0) p n
() N
(if) K
( __name__==") p
(__main__) str
(":) p n
() S 8 T () S
(#amatfile,divv,divh,mosaic,dispersion,oscstep\):) c n
() p 8 T (tmp=ReflWidthBothEdge\(sys.argv[1],0.02,0.02,0.5,0.0002,0.1\)) N
() S 8 T () S
(#hklist=[array\(\( -12,  -19,-16\)\)]) c n
() p 8 T () S
(#hklist=[array\(\(-11,-16,-16\)\)]) c n
() p 8 T (h,k,l=int\(sys.argv[2]\),int\(sys.argv[3]\),int\(sys.argv[4]\)) N
() S 8 T (hklist=[array\(\(h,k,l\)\)]) N
() S 8 T () S
(#hklist=[array\(\(20,15,10\)\)]) c n
() p n
() S 8 T (oscstart=0.0) N
() N
() S 8 T () S
(for) K
( hkl ) p
(in) K
( hklist:) p n
() S 8 T () S 16 T () S
(#print "HKL type is ",type\(hkl\)) c n
() p 8 T () S 16 T () S
(if) K
( tmp.setHKL\(hkl,oscstart\)==True:) p n
() S 8 T () S 16 T () S 24 T (tmp.calcDELEPS\(\)) N
() S 8 T () S 16 T () S 24 T () S
(print) K
( tmp.calcPartiality\(\)) p n
(ReflWidthBothEdge.py) (Page 7/7) ( 2 18, 13 16:10) title
border
grestore
(Printed by Kunio Hirata) rhead
(ReflWidthBothEdge.py) (4/4) (\346M-^\\M-^H\346M-^[M-^\\\346M-^W\245 2\346M-^\\M-^H 18, 2013) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
